---
###############################################################################################
## REGISTRY
###############################################################################################
- block:
  - name: Create directory for registry keys
    file:
      path: "/etc/docker/certs.d/{{ansible_hostname}}:5000/"
      state: directory

  # Create registry certificates
  - name: Create the CA private key
    command: openssl genrsa -out ca.key 4096
    args:
      chdir: "/opt/docker_registry/certs"

  - name: Create the CA certificate
    command: openssl req -new -x509 -days 365 -key ca.key -out ca.crt  -subj "/C={{country}}/ST={{region}}/L={{city}}/O={{organization}}/OU={{ounit}}/CN={{ansible_hostname}}"
    args:
      chdir: "/opt/docker_registry/certs"

  - name:  Create a passwordless private key
    command: openssl genrsa -out client.key 4096
    args:
      chdir: "/opt/docker_registry/certs"

  - name:  Create a certificate request for the private key
    command: openssl req -nodes -newkey rsa:2048 -keyout {{ansible_hostname}}.key -out {{ansible_hostname}}.csr -subj "/C={{country}}/ST={{region}}/L={{city}}/O={{organization}}/OU={{ounit}}/CN={{ansible_hostname}}"
    args:
      chdir: "/opt/docker_registry/certs"

  - name:  Signing the certificates
    command: openssl x509 -req -days 365 -in {{ansible_hostname}}.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out {{ansible_hostname}}.cert
    args:
      chdir: "/opt/docker_registry/certs"

  - name: Copy {{ansible_hostname}}.cert file
    copy:
      remote_src: True
      dest: "/etc/docker/certs.d/{{ansible_hostname}}:5000/{{ansible_hostname}}.cert"
      src: "/opt/docker_registry/certs/{{ansible_hostname}}.cert"

  - name: Copy {{ansible_hostname}}.key file
    copy:
      remote_src: True
      dest: "/etc/docker/certs.d/{{ansible_hostname}}:5000/{{ansible_hostname}}.key"
      src: "/opt/docker_registry/certs/{{ansible_hostname}}.key"

  - name: Copy ca.crt file
    copy:
      remote_src: True
      dest: "/etc/docker/certs.d/{{ansible_hostname}}:5000/ca.crt"
      src: "/opt/docker_registry/certs/ca.crt"

  - name: Delete unneeded certificates
    file:
      path: "/opt/docker_registry/certs/{{item}}"
      state: absent
    with_items:
      - "{{ansible_hostname}}.csr"
      - client.key
      - ca.key

  - name: Run docker registry
    docker_container:
      name: registry
      image: registry:2
      volumes:
        - /opt/docker_registry:/var/lib/registry
        - /opt/docker_registry/certs:/certs
      ports:
       - "5000:5000"
      env:
          REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/{{ansible_hostname}}.cert"
          REGISTRY_HTTP_TLS_KEY: "/certs/{{ansible_hostname}}.key"
      restart_policy: always

  # Needed due to reconfiguration errors
  - name: Restart docker registry
    docker_container:
      state: started
      restart: yes
      name: registry
      image: registry:2
      volumes:
        - /opt/docker_registry:/var/lib/registry
        - /opt/docker_registry/certs:/certs
      ports:
       - "5000:5000"
      env:
          REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/{{ansible_hostname}}.cert"
          REGISTRY_HTTP_TLS_KEY: "/certs/{{ansible_hostname}}.key"
      restart_policy: always

  when: (docker_installation == "registry") or (docker_installation == "both")

###############################################################################################
## MIRROR
###############################################################################################

- block:
  - name: Create docker mirror config.yml
    copy:
      dest: "/opt/docker_registry/config.yml"
      src: "files/config.yml"

  - name: Create mirror directory
    file:
      path: "/opt/docker_registry/mirror"
      state: directory
      mode: 0755

  - name: Run docker mirror
    docker_container:
      name: mirror
      image: registry
      volumes:
        - "/opt/docker_registry/mirror/:/var/lib/registry/"
        - "/opt/docker_registry/mirror/config.yml:/etc/docker/registry/config.yml"
      ports:
       - "5555:5000"
      env:
          STORAGE_PATH: "/registry"
          STANDALONE: "false"
          MIRROR_SOURCE: "https:/registry-1.docker.io"
          MIRROR_SOURCE_INDEX: "https://index.docker.io"          
      restart_policy: always
     
  when: (docker_installation == "mirror") or (docker_installation == "both")